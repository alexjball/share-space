#!/bin/bash
#
# Script for managing an FFmpeg build environment packaged in a Docker container.
# This wraps the popular ffmpeg container: https://hub.docker.com/r/jrottenberg/ffmpeg
#
# To build and use the ffmpeg submodule within the container:
# > ./ffmpeg-container build_ffmpeg
# > ./ffmpeg-container stream_test

IMAGE_NAME=ffmpeg-build
CONTAINER_NAME=ffmpeg
DOCKERFILE_URL='https://raw.githubusercontent.com/jrottenberg/ffmpeg/master/docker-images/4.2/ubuntu/Dockerfile'
HOST_MOUNT=$(dirname $(dirname $(realpath $0)))
WORKDIR=/tmp/share-space
FFMPEG_BUILD=$WORKDIR/ffmpeg/build
FFMPEG_INSTALL=$FFMPEG_BUILD/install

# Docker will create this if it doesn't exist, and the room server can't
# grab it. So start the room server first.
# TODO: fix.
VIDEO_SINK_SOCKET=/tmp/share-space-video-sink.sock
INFO_SINK_SOCKET=/tmp/share-space-info-sink.sock

build_ffmpeg() {
	# Run from inside container
	mkdir -p $FFMPEG_INSTALL
	cd $FFMPEG_BUILD
	../configure \
		--prefix=$FFMPEG_INSTALL \
		--enable-libvpx \
		--enable-libopus \
		--enable-libx264 \
		--enable-gpl \
		--enable-shared
	make -j $(nproc)
	make install
}

stream_test() {
	# Stream an infinite video loop to the room server
	# Run from inside container
 	LD_LIBRARY_PATH="$FFMPEG_INSTALL/lib:$LD_LIBRARY_PATH" \
		$FFMPEG_INSTALL/bin/ffmpeg \
		-re \
		-i $WORKDIR/assets/earth.mp4 \
		-filter_complex loop=loop=-1:size=30:start=0,realtime \
		-f webm_streaming_chunk \
		-info_url unix://$INFO_SINK_SOCKET \
		unix://$VIDEO_SINK_SOCKET
}

build() {
	docker build \
		--target build \
		-t $IMAGE_NAME \
		--build-arg MAKEFLAGS="-j$(($(nproc) + 1))" \
		$DOCKERFILE_URL
}

start() {
	# FFmpeg is configured to install to /opt/ffmpeg. The Dockerfile then copies libs and binaries to /usr/local.
	# In order to use pkg-config to build against the libraries, we need to use the .pc files in 
	# /opt/ffmpeg/lib/pkgconfig, which point to the libraries in /opt/ffmpeg, not /usr/local. So point everything at
	# /opt/ffmpeg to make pkg-config work, even though there are ffmpeg libs and binaries in /usr/local.
	docker run \
		-itd \
		--name $CONTAINER_NAME \
		-v $HOST_MOUNT:$WORKDIR \
		-v $VIDEO_SINK_SOCKET:$VIDEO_SINK_SOCKET \
		-v $INFO_SINK_SOCKET:$INFO_SINK_SOCKET \
		-e LD_LIBRARY_PATH=/opt/ffmpeg/lib \
		-e PKG_CONFIG_PATH=/opt/ffmpeg/lib/pkgconfig \
		$IMAGE_NAME bash
}

attach() {
	docker exec -it $CONTAINER_NAME bash
}

remove() {
	docker container stop $CONTAINER_NAME && docker container rm $CONTAINER_NAME
}

prog_name=$0
cmd=$1
shift || true

case "$cmd" in
	build)
		build $@
		;;
	start)
		start $@
		;;
	attach)
		attach $@
		;;
	remove)
		remove $@
		;;
	build_ffmpeg)
		build_ffmpeg $@
		;;
	stream_test)
		stream_test $@
		;;
	*)
		echo "Usage: $prog_name {build|start|attach|remove|build_ffmpeg|stream_test}"
		exit 1
esac
