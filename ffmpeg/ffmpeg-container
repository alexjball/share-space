#!/bin/bash
#
# Script for managing an FFmpeg build environment packaged in a Docker container.
# This wraps the popular ffmpeg container: https://hub.docker.com/r/jrottenberg/ffmpeg

IMAGE_NAME=ffmpeg-build
CONTAINER_NAME=ffmpeg
DOCKERFILE_URL='https://raw.githubusercontent.com/jrottenberg/ffmpeg/master/docker-images/4.2/ubuntu/Dockerfile'
HOST_MOUNT=$(dirname $(dirname $(realpath $0)))
WORKDIR=/tmp/share-space

build() {
	docker build \
		--target build \
		-t $IMAGE_NAME \
		--build-arg MAKEFLAGS="-j$(($(nproc) + 1))" \
		$DOCKERFILE_URL
}

start() {
	# FFmpeg is configured to install to /opt/ffmpeg. The Dockerfile then copies libs and binaries to /usr/local.
	# In order to use pkg-config to build against the libraries, we need to use the .pc files in 
	# /opt/ffmpeg/lib/pkgconfig, which point to the libraries in /opt/ffmpeg, not /usr/local. So point everything at
	# /opt/ffmpeg to make pkg-config work, even though there are ffmpeg libs and binaries in /usr/local.
	docker run \
		-itd \
		--name $CONTAINER_NAME \
		-v $HOST_MOUNT:$WORKDIR \
		-e LD_LIBRARY_PATH=/opt/ffmpeg/lib \
		-e PKG_CONFIG_PATH=/opt/ffmpeg/lib/pkgconfig \
		$IMAGE_NAME bash
}

attach() {
	docker exec -it $CONTAINER_NAME bash
}

remove() {
	docker container stop $CONTAINER_NAME && docker container rm $CONTAINER_NAME
}

prog_name=$0
cmd=$1
shift || true

case "$cmd" in
	build)
		build $@
		;;
	start)
		start $@
		;;
	attach)
		attach $@
		;;
	remove)
		remove $@
		;;
	*)
		echo "Usage: $prog_name {build|start|attach|remove}"
		exit 1
esac
